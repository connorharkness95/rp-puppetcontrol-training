# This data file is applied to instances classified with the jenkins_master role
# in the production tier of your environment. It includes an example of how to
# configure a Jenkins Master instance
---
classes:
  - role::jenkins_master
  - rap_puppet_jenkins::git

# Configure:
#   - Jenkins version to install
#   - Number of executors on the master
#   - Jenkins firewall to false
jenkins::version: '2.60.2-1.1'
jenkins::executors: 4
jenkins::configure_firewall: false

# Configure:
#   - The JenkinsControl Git repository containing the job configurations
#   - The directory under jobs which will be used to configure this Jenkins
rap_puppet_jenkins::seed_job::seed_job_jobs_url: 'git@gitlab.et-scm.com:tio-rap-london/rap-jenkinscontrol-skeleton.git'
rap_puppet_jenkins::seed_job::seed_job_jobs_directory: 'prod'

# Configure:
#----------------------------------------------------------------------------------------
# Create a deploy key via the gitlab console:
#   From your project page, select Settings-> Deploy Keys 
#   Click on 'New Deploy Key'
#   Click on the work 'here' to see instructions to create the public key
#   Copy the contents of the *.pub file in the console and then 'Create Deploy Key'
#
# Encrypt the private key
#   From the puppet master, as root cd /etc/puppetlabs/puppet
#   cp contents of the private keyfile from above to a file on the puppet master
#   eyaml encrypt -l rap_puppet_jenkins::git::ssh_private_key -f <your private key file>
#   Copy output to the rap_puppet_jenkins::git::ssh_private_key: line below
#----------------------------------------------------------------------------------------
rap_puppet_jenkins::git::ssh_private_key: >

# Configure:
#   - The Jenkins plugins to install and the version
jenkins::plugin_hash:
  'pollscm':
    version: '1.3.1'
  'ace-editor':
    version: '1.1'
  'authentication-tokens':
    version: '1.3'
  'scm-api':
    version: '2.2.0'
  'icon-shim':
    version: '2.0.3'
  'plain-credentials':
    version: '1.4'
  'credentials-binding':
    version: '1.12'
  'docker-commons':
    version: '1.8'
  'handlebars':
    version: '1.1.1'
  'junit':
    version: '1.20'
  'script-security':
    version: '1.30'
  'durable-task':
    version: '1.14'
  'matrix-project':
    version: '1.11'
  'workflow-job':
    version: '2.12.2'
  'workflow-support':
    version: '2.14'
  'workflow-step-api':
    version: '2.12'
  'workflow-api':
    version: '2.20'
  'workflow-cps':
    version: '2.2'
  'workflow-scm-step':
    version: '1.15'
  'jquery-detached':
    version: '1.2.1'
  'momentjs':
    version: '1.1.1'
  'pipeline-input-step':
    version: '2.7'
  'pipeline-stage-step':
    version: '2.2'
  'pipeline-graph-analysis':
    version: '1.1'
  'pipeline-rest-api':
    version: '2.0'
  'pipeline-stage-view':
    version: '2.0'
  'ssh-credentials':
    version: '1.13'
  'credentials':
    version: '2.1.13'
  'git-client':
    version: '2.5.0'
  'mailer':
    version: '1.18'
  'matrix-project':
    version: '1.7.1'
  'structs':
    version: '1.9'
  'git':
    version: '3.5.0'
    
# Configure:
#   - Install monit and configure to watch the jenkins service on this instance
#----------------------------------------------------------------------------------------
#  The block below is valid if the jenkins instance is centos.
#  If the jenkins instance is debian, change the check process line to the following:
#    check process jenkinsmaster with pidfile /var/run/jenkins/jenkins.pid
#----------------------------------------------------------------------------------------

profile::jenkins_master::monit_checks:
  'jenkinsmaster':
    content: >
      check process jenkins with pidfile /var/run/jenkins.pid
      start program = "/bin/systemctl restart jenkins" with timeout 60 seconds
      stop program = "/bin/systemctl stop jenkins"
      if failed host 127.0.0.1 port 8080 type tcp for 2 cycles then restart

# Configure:
#   - Install jenkinsmaster_health_check.py script and setup crontab entry to run it
#----------------------------------------------------------------------------------------
#  Add your jobnames after job-dsl-seed in a space seperated list
#----------------------------------------------------------------------------------------

cloudwatch::metric_data:
 'prod-jenkins-servicestatus-jenkinsmaster':
    folder_name: '/usr/local/sbin'
    template_name: 'jenkinsmaster_health_check.py'
    template_dir: '/usr/local/sbin'
    cron_name: 'jenkins-servicestatus-jenkinsmaster'
    cron_cmd: '/usr/local/sbin/jenkinsmaster_health_check.py --jenkins-url http://localhost:8080 -j job-dsl-seed'
    cron_hour: '*'
    cron_minute: '*/5'
    template_mode: '0755'
    template_content: 'cloudwatch/jenkinsmaster_health_check.py'

#----------------------------------------------------------------------------------------
#   Associates an alarm to trigger if the Jenkins service reports a
#   non-functional status. A status of 1 indicates the service is functioning
#   properly, a status of 0 indicates the service is unhealthy or offline.
#
#   Set the value of alarm_actions and ok_actions to the arn of an sns topic 
#----------------------------------------------------------------------------------------

cloudwatch::metric_alarm:
  prod-jenkins-servicestatus-jenkinsmaster:
    metric: 'JenkinsServiceStatus'
    alarm_name: 'JenkinsServiceStatus-%{::ec2_metadata.instance-id}'
    dimensions: 'Name=InstanceId,Value=%{::ec2_metadata.instance-id}'
    namespace: 'AWS/EC2'
    statistic: 'Maximum'
    period: '300'
    evaluation: '2'
    threshold: '1'
    comparison: 'LessThanThreshold'
    alarm_actions: ''
    ok_actions: ''

#----------------------------------------------------------------------------------------    
#   Associate an alarm for the status of job-dsl-seed. A value of 1 indicates the
#   last build of the job completed successfully, a value of 0 indicates the last
#   build of the job failed.
#
#   Duplicate this block for any other jobs that should be monitoried. Replace job-dsl-seed
#   with your job name.
#
#   Set the value of alarm_actions and ok_actions to the arn of an sns topic
#----------------------------------------------------------------------------------------

  prod-jenkins-jobstatus-job-dsl-seed:
    metric: 'JenkinsJob-Status-job-dsl-seed'
    alarm_name: 'JenkinsJob-Status-job-dsl-seed-%{::ec2_metadata.instance-id}'
    dimensions: 'Name=InstanceId,Value=%{::ec2_metadata.instance-id}'
    namespace: 'AWS/EC2'
    statistic: 'Maximum'
    period: '300'
    evaluation: '2'
    threshold: '1'
    comparison: 'LessThanThreshold'
    alarm_actions: ''
    ok_actions: ''
    
#----------------------------------------------------------------------------------------
#   Associate an alarm for the last build time of job-dsl-seed. The value returned 
#   is the number of hours since the last build completed. The job-dsl-seed is scheduled
#   scheduled to run every 5 minutes, the threshold below is set to 1 hour. A value greater
#   than the threshold, indicates that there may be an issue with the job.
#
#   Duplicate this block for any other jobs that should be monitoried. Replace job-dsl-seed
#   with your job name. If your-job is scheduled to run daily, the threshold should be set 
#   to 23 hours.
#
#   Set the value of alarm_actions and ok_actions to the arn of an sns topic
#----------------------------------------------------------------------------------------

  prod-jenkins-jobruntime-job-dsl-seed:
    metric: 'JenkinsJob-LastRunTime-job-dsl-seed'
    alarm_name: 'JenkinsJob-LastRunTime-job-dsl-seed-%{::ec2_metadata.instance-id}'
    dimensions: 'Name=InstanceId,Value=%{::ec2_metadata.instance-id}'
    namespace: 'AWS/EC2'
    statistic: 'Maximum'
    period: '300'
    evaluation: '2'
    threshold: '1'
    comparison: 'GreaterThanThreshold'
    alarm_actions: ''
    ok_actions: ''